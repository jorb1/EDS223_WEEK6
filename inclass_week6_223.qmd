---
title: "Week 6"
author: "BJ"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(terra)
library(tidyverse)
library(tmap)
library(spDataLarge)
```

```{r}
boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))

elevation <- terra::rast(system.file("raster/srtm.tif", package = "spDataLarge"))

if(crs(elevation) == crs(boundary)){
  print("CRS matches")
} else{
  boundary <- sf::st_transform(boundary, st_crs(elevation))
}
```

```{r}
if(sf::st_geometry_type(boundary) == "POLYGON") {
  print("polygon data")
} else{
  print("not polygon data")
}
```

```{r}
park_polygon <- boundary

# Create line version of the park boundary
park_border <- boundary %>% 
  sf::st_cast(., "MULTILINESTRING")

tm_shape(park_polygon) +
  tm_polygons()

tm_shape(park_border) +
  tm_lines()
```


```{r}
polygon_raster <- terra::rasterize(park_polygon, elevation) 

border_raster <- terra::rasterize(park_border, elevation)

map1 <- tm_shape(polygon_raster) +
  tm_raster() +
  tm_layout(main.title = "rasterized polygon")

map2 <- tm_shape(border_raster) +
  tm_raster() +
  tm_layout(main.title = "rasterized line")

tmap_arrange(map1, map2, nrow = 1)
```

```{r}
# create low spatial resolution template raster
template_raster_low <- terra::rast(ext(park_polygon), resolution = 0.05,
                        crs = st_crs(park_polygon))

# create high spatial resolution template raster
template_raster_high <- terra::rast(ext(park_polygon), resolution = 0.01,
                        crs = st_crs(park_polygon))

# rasterize to low resolution template raster
polygon_raster_low <- terra::rasterize(park_polygon, template_raster_low)

# rasterize to high resolution template raster
polygon_raster_high <- terra::rasterize(park_polygon, template_raster_high)
```

```{r}
tm_shape(polygon_raster_high) + 
  tm_raster()

tm_shape(polygon_raster_low) +
  tm_raster()
```


```{r}
# define point data
cycle_hire_osm <- spData::cycle_hire_osm

# transform to projected CRS
cycle_hire_osm_projected = sf::st_transform(cycle_hire_osm, "EPSG:27700")

# define raster template
template_raster <- terra::rast(ext(cycle_hire_osm_projected), resolution = 1000,
                       crs = crs(cycle_hire_osm_projected))
```


```{r}
ch_raster1 <- terra::rasterize(cycle_hire_osm_projected, template_raster)
ch_raster2 <- rasterize(cycle_hire_osm_projected, template_raster, 
                       fun = "length")
ch_raster3 <- rasterize(cycle_hire_osm_projected, template_raster, 
                       field = "capacity", fun = sum, na.rm = TRUE)
```

```{r}
map1 <- tm_shape(cycle_hire_osm_projected) +
  tm_symbols(col = "capacity") +
  tm_layout(main.title = "original points")

map2 <- tm_shape(ch_raster1) +
  tm_raster(title = "presence") +
  tm_layout(main.title = "presence/absence")

map3 <- tm_shape(ch_raster2) +
  tm_raster(title = "Hire points (n)") +
  tm_layout(main.title = "count of points") 

map4 <- tm_shape(ch_raster3) +
  tm_raster(title = "Capacity (n bikes)") +
  tm_layout(main.title = "sum of capacity")

tmap_arrange(map1, map2, map3, map4, nrow = 2)
```




# False Color Imagery

```{r}
L7 <- terra::rast(system.file("tif/L7_ETMs.tif", package = "stars"))
```

```{r}
map11 <- tm_shape(L7) + 
  tm_rgb(r = 3, g = 2, b = 1) +
  tm_layout(main.title = "true color")

map22 <- tm_shape(L7) + 
  tm_rgb(r = 4, g = 3, b = 2) +
  tm_layout(main.title = "NIR, red, green")

map33 <- tm_shape(L7) + 
  tm_rgb(r = 5, g = 4, b = 2) +
  tm_layout(main.title = "SWIR, NIR, green")

tmap_arrange(map11, map22, map33, nrow = 1)
```











